{"version":3,"file":"static/js/693.4b75ec33.chunk.js","mappings":"uPAEaA,EAAWC,EAAAA,EAAAA,GAAH,8EAGZ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MAGfC,EAAUJ,EAAAA,EAAAA,GAAH,yJAIH,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MACvB,SAAAF,GAAC,OAAIA,EAAEC,MAAMG,UAAUC,KACrB,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,YAAYC,QAE3BC,EAAeT,EAAAA,EAAAA,OAAH,qYACf,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MACpB,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MACR,SAAAF,GAAC,OAAIA,EAAEC,MAAMQ,OAAOC,SAG9B,SAAAV,GAAC,OAAIA,EAAEC,MAAMU,QAAQC,UACd,SAAAZ,GAAC,OAAIA,EAAEC,MAAMY,MAAMD,UACpB,SAAAZ,GAAC,OAAIA,EAAEC,MAAMQ,OAAOK,UAC3B,SAAAd,GAAC,OAAIA,EAAEC,MAAMQ,OAAOM,SAKhB,SAAAf,GAAC,OAAIA,EAAEC,MAAMQ,OAAOC,SAMpBM,EAAMjB,EAAAA,EAAAA,KAAH,2CACD,SAAAC,GAAC,OAAIA,EAAEC,MAAMK,YAAYM,U,oBC/B3BK,EAAc,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,SAACxB,EAAD,UACKoB,EAASK,KAAI,YAA2B,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAEvB,OACQ,UAACvB,EAAD,WAAmBsB,EAAnB,MAA0B,SAACT,EAAD,UAAMU,KAChC,SAAClB,EAAD,CAAcmB,KAAK,SAASC,QAAS,kBAAMP,GAASQ,EAAAA,EAAAA,IAAcL,KAAlE,sBADcA,S,UCbzBM,EAAc/B,EAAAA,EAAAA,MAAH,4HACX,SAAAC,GAAC,OAAIA,EAAEC,MAAMG,UAAUC,KACrB,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,YAAYC,QAEvB,SAAAP,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MAC3B,SAAAF,GAAC,OAAIA,EAAEC,MAAMQ,OAAOM,SAGhBgB,EAAchC,EAAAA,EAAAA,MAAH,gIACf,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MAClB,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MACZ,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MAIf,SAAAF,GAAC,OAAIA,EAAEC,MAAMQ,OAAOK,UCPnCkB,ECSc,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACb,EAAIc,GAWvD,OAREd,IAFFc,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP,IDtBYG,GAEJC,EAAS,WAClB,IAAMC,GAAQxB,EAAAA,EAAAA,IAAYyB,EAAAA,IACpBvB,GAAWC,EAAAA,EAAAA,MAEjB,OACI,UAACuB,EAAA,EAAD,CAAKC,GAAG,MACRC,QAAQ,OACRC,cAAc,SACdC,WAAW,SAHX,WAII,SAACnB,EAAD,CAAaoB,QAASlB,EAAtB,oCACA,SAACD,EAAD,CAAaJ,KAAK,OAAOgB,MAAOA,EAE5BQ,SAAU,SAACC,GAAD,OAAS/B,EAASgC,EAAAA,GAAAA,QAAAA,aAAiCD,EAAIE,OAAOX,SACxEnB,GAAIQ,QEvBPuB,EAAiBxD,EAAAA,EAAAA,GAAH,iJAEd,SAAAC,GAAC,OAAIA,EAAEC,MAAMG,UAAUoD,KACrB,SAAAxD,GAAC,OAAIA,EAAEC,MAAMK,YAAYC,QAC/B,SAAAP,GAAC,OAAIA,EAAEC,MAAMQ,OAAOgD,SAEZ,SAAAzD,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MCLvBwD,EAAe,SAAC,GAAD,IAAGD,EAAH,EAAGA,MAAH,OAAe,SAACF,EAAD,UAAiBE,KCwB5D,EAlBqB,WASjB,OAPiBnC,EAAAA,EAAAA,KAKjBD,EAASsC,EAAAA,EAAAA,QAGL,UAACd,EAAA,EAAD,CAAKC,GAAG,MAAR,WACG,SAACY,EAAD,CAAcD,MAAM,cACpB,SAACf,EAAD,KACA,SAACzB,EAAD,S,sGCtBJ,IAAM2C,EAAW,SAAAC,GAAK,OAAIA,EAAMC,UAAUC,OACpCnB,EAAY,SAAAiB,GAAK,OAAIA,EAAMC,UAAUE,QAErC5C,EAAqB,SAAAyC,GAC9B,IAAMI,EAAcL,EAASC,GACvBG,EAASpB,EAAUiB,GACzB,OAAOI,EAAYD,QAAO,SAAAE,GAAO,OAAIA,EAAQzC,KAAK0C,cAAcC,SAASJ,EAAOG","sources":["components/contact-list/ContactList.styled.js","components/contact-list/ContactList.jsx","components/filter/Filter.styled.js","components/filter/Filter.jsx","../node_modules/nanoid/index.browser.js","components/section-title/SectionTitle.styled.js","components/section-title/SectionTitle.jsx","pages/ContactsPage.jsx","redux/contacts/phonebook-selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Contacts = styled.ul`\nmargin: 0 auto;\nalign-items: center;\nwidth: ${p => p.theme.space[9]}px;\n`;\n\nexport const Contact = styled.li`\ndisplay: flex;\njustify-content:space-between;\nalign-items: center;\nmargin-bottom: ${p => p.theme.space[4]}px;\nfont-size: ${p => p.theme.fontSizes.m};\nfont-weight: ${p => p.theme.fontWeights.bold};\n`;\nexport const DeleteButton = styled.button`\nheight: ${p => p.theme.space[5]}px;\nwidth: ${p => p.theme.space[7]}px;\nbackground-color: ${p => p.theme.colors.white};\ncursor: pointer;\noutline: none;\nborder: ${p => p.theme.borders.normal};\nborder-radius: ${p => p.theme.radii.normal};\nborder-color: ${p => p.theme.colors.accent};\ncolor: ${p => p.theme.colors.black};\n\n&:hover,\n&:focus{\n    background-color: skyblue;\n    color: ${p => p.theme.colors.white};\n    box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.12), 0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n      0px 2px 1px 0px rgba(0, 0, 0, 0.2);\n}\n`;\n\nexport const Tel = styled.span`\nfont-weight: ${p => p.theme.fontWeights.normal};\n`;","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from 'redux/contacts/phonebook-selectors';\nimport { Contacts, Contact, DeleteButton, Tel } from './ContactList.styled';\nimport { deleteContact } from 'redux/contacts/phonebook-operations';\n\nexport const ContactList = () => {\n    const contacts = useSelector(getVisibleContacts);\n    const dispatch = useDispatch();\n\n    return (\n        <Contacts>\n            {contacts.map(({ id, name, number }) => { \n                \n                return (\n                        <Contact key={id}>{name}: <Tel>{number}</Tel>\n                        <DeleteButton type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n                            Delete\n                        </DeleteButton>\n                        </Contact>\n                )\n            }\n            )}\n        </Contacts>\n    );\n}\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired\n    }))\n}","import styled from '@emotion/styled';\n\nexport const FilterTitle = styled.label`\nfont-size: ${p => p.theme.fontSizes.m};\nfont-weight: ${p => p.theme.fontWeights.bold};\ntext-transform: uppercase;\nmargin-bottom: ${p => p.theme.space[4]}px;\ncolor: ${p => p.theme.colors.black};\n`;\n\nexport const FilterInput = styled.input`\nwidth: ${p => p.theme.space[8]}px;\nheight: ${p => p.theme.space[5]}px;\nmargin-bottom: ${p => p.theme.space[5]}px;\n\n&:hover,\n&:focus{\n    outline-color: ${p => p.theme.colors.accent};\n}\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getFilter } from 'redux/contacts/phonebook-selectors';\n\n// import * as phonebookActions from '../../redux/phonebookActions';\nimport { filterSlice } from 'redux/contacts/phonebook-slice';\n\nimport { FilterTitle, FilterInput } from './Filter.styled';\nimport { Box } from 'components/Box';\n\nconst filterId = nanoid();\n\nexport const Filter = () => {\n    const value = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    return (\n        <Box as=\"div\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\">\n            <FilterTitle htmlFor={filterId}>Find Contacts by name</FilterTitle>\n            <FilterInput type=\"text\" value={value}\n                // onChange={(evt) => dispatch(phonebookActions.changeFilter(evt.target.value))}\n                onChange={(evt) => dispatch(filterSlice.actions.changeFilter(evt.target.value))}\n                id={filterId} />\n        </Box>\n    );\n}\n   ","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from '@emotion/styled';\n\nexport const SecondaryTitle = styled.h2`\ntext-align: center;\nfont-size: ${p => p.theme.fontSizes.l};\nfont-weight: ${p => p.theme.fontWeights.bold};\ncolor: ${p => p.theme.colors.title};\ntext-transform: uppercase;\nmargin-bottom: ${p => p.theme.space[5]}px;\n`;","import { SecondaryTitle } from \"./SectionTitle.styled\";\nimport PropTypes from 'prop-types';\n\nexport const SectionTitle = ({ title }) => <SecondaryTitle>{title}</SecondaryTitle>;\n\nSectionTitle.propTypes = {\n    title: PropTypes.string.isRequired\n}","import { Box } from \"components/Box\"\nimport { ContactList } from \"components/contact-list/ContactList\";\nimport { Filter } from \"components/filter/Filter\";\nimport { SectionTitle } from \"components/section-title/SectionTitle\";\n// import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/phonebook-operations\";\n\n\nconst ContactsPage = () => {\n   \n    const dispatch = useDispatch();\n   \n    \n    // useEffect(() => dispatch(fetchContacts()), [dispatch]);\n\n    dispatch(fetchContacts());\n\n    return (\n        <Box as='div'>\n           <SectionTitle title=\"Contacts\"/>\n           <Filter/>\n           <ContactList /> \n        </Box>    \n    )\n}\n\nexport default ContactsPage;","export const getItems = state => state.phonebook.items;\nexport const getFilter = state => state.phonebook.filter;\n\nexport const getVisibleContacts = state => {\n    const allContacts = getItems(state);\n    const filter = getFilter(state);\n    return allContacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  };"],"names":["Contacts","styled","p","theme","space","Contact","fontSizes","m","fontWeights","bold","DeleteButton","colors","white","borders","normal","radii","accent","black","Tel","ContactList","contacts","useSelector","getVisibleContacts","dispatch","useDispatch","map","id","name","number","type","onClick","deleteContact","FilterTitle","FilterInput","filterId","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","Filter","value","getFilter","Box","as","display","flexDirection","alignItems","htmlFor","onChange","evt","filterSlice","target","SecondaryTitle","l","title","SectionTitle","fetchContacts","getItems","state","phonebook","items","filter","allContacts","contact","toLowerCase","includes"],"sourceRoot":""}